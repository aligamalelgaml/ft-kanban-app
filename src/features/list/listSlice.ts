import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import axios from 'axios';
import {key, token} from '../../app/auth';


export interface ListState {
    lists: Array<{ id: string; name: string, idBoard: string }>;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: ListState = {
    lists: [],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const fetchLists = createAsyncThunk(
    'list/fetchLists',
    async (boardID: string) => {
        const response = await axios(`https://api.trello.com/1/boards/${boardID}/lists?key=43fa6c84ae014f2d39ecd38e3813a8b0&token=ATTA831f4c44d08bddff424862f8de9220e91c2f7b7d53669bc6cf666fb8b9c8966a2AA36F4F`);
        return response.data;
    }
);


export const listSlice = createSlice({
    name: 'list',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addList: (state, action: PayloadAction<string>) => {
            console.log("adding list")
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchLists.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchLists.fulfilled, (state, action) => {
                state.status = 'idle';
                state.lists = action.payload.map((list: any) => ({
                    id: list.id,
                    name: list.name,
                    idBoard: list.idBoard,
                }));
            })
            .addCase(fetchLists.rejected, (state) => {
                state.status = 'failed';
            })
    },
});

export const { addList } = listSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLists = (state: RootState) => state.list.lists;

export default listSlice.reducer;
